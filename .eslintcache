[{"/Users/dufei/Desktop/project/CM_SCLE/src/index.js":"1","/Users/dufei/Desktop/project/CM_SCLE/src/utils/index.js":"2","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleAttrTree/ScleAttrTree.js":"3","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleView.js":"4","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleTools/scleToolsBar.js":"5","/Users/dufei/Desktop/project/CM_SCLE/src/utils/Browser.js":"6","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleControl.js":"7"},{"size":597,"mtime":1654507926240,"results":"8","hashOfConfig":"9"},{"size":1538,"mtime":1621387255613,"results":"10","hashOfConfig":"9"},{"size":14755,"mtime":1667801206336,"results":"11","hashOfConfig":"9"},{"size":12065,"mtime":1667722117961,"results":"12","hashOfConfig":"9"},{"size":21169,"mtime":1667721881830,"results":"13","hashOfConfig":"9"},{"size":4273,"mtime":1610022294551,"results":"14","hashOfConfig":"9"},{"size":198,"mtime":1667488932568,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u4mpcg",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dufei/Desktop/project/CM_SCLE/src/index.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/utils/index.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleAttrTree/ScleAttrTree.js",["33"],"import { PureComponent } from \"react\";\nimport { Table, Tabs, Tree } from \"antd\";\nimport \"./scleAttrTree.less\";\nimport { IsPhone } from \"../../utils/Browser\";\n\nconst { TabPane } = Tabs;\nconst { TreeNode } = Tree;\n\nconst columns = [\n  {\n    title: \"参数名\",\n    dataIndex: \"name\",\n  },\n  {\n    title: \"参数值\",\n    dataIndex: \"value\",\n  },\n];\nexport default class ScleAttrTree extends PureComponent {\n  key = 1000000;\n  keys = []; //显示的的keys\n  tempMutilpSelect = []; // 临时多选\n\n  state = {\n    treeData: {\n      child: [],\n    },\n    paramsData: [], // 模型参数\n    treeNodeCheckedKeys: [], // 显示隐藏复选框\n    treeNodeSelectKeys: [], // 选中的key\n    expandedKeys: [], //展开的key\n    PMITreeData: [],\n  };\n  render() {\n    const {\n      treeData,\n      treeNodeCheckedKeys,\n      treeNodeSelectKeys,\n      expandedKeys,\n      paramsData,\n      PMITreeData,\n    } = this.state;\n    return (\n      // <Tabs\n      //   defaultActiveKey=\"1\"\n      //   className=\"scleAttrTree\"\n      //   renderTabBar={this.renderTabBar}\n      // >\n      //   <TabPane tab=\"模型树\" key=\"1\">\n      //     <Tree\n      //       checkable\n      //       checkStrictly\n      //       checkedKeys={treeNodeCheckedKeys}\n      //       selectedKeys={treeNodeSelectKeys}\n      //       expandedKeys={expandedKeys}\n      //       onClick={(e) => {\n      //         return false;\n      //       }}\n      //       onExpand={(e) => {\n      //         this.hideSelect = true;\n      //         this.setState({\n      //           expandedKeys: e,\n      //         });\n      //       }}\n      //       onCheck={(treeNodeCheckedKeys, e) => {\n      //         this.setState({\n      //           treeNodeCheckedKeys,\n      //         });\n      //         window.setModelVisible(\n      //           this.findleafIndexs(e.node.props.dataRef),\n      //           e.checked\n      //         );\n      //          // 模型树隐藏时 dofeel\n      //         const ms = this.state.treeNodeSelectKeys;\n      //         if (ms * 1 === e.node.props.dataRef.key) {\n      //           window.pickObjectVisible = e.checked;\n      //           window.setPickObjectParameters();\n      //         }\n      //       //\n\n      //       }}\n      //     >\n      //       {this.renderTreeNodes(treeData)}\n      //     </Tree>\n      //   </TabPane>\n      //   <TabPane tab=\"参数\" key=\"2\">\n      //     <Table\n      //       className=\"attrTable\"\n      //       columns={columns}\n      //       dataSource={paramsData}\n      //       locale={{ emptyText: \"无数据\" }}\n      //       size=\"middle\"\n      //     />\n      //   </TabPane>\n      // </Tabs>\n\n      <>\n        {!this.props.showParams ? (\n          <div className=\"attr_tree\">\n            <div>\n              <h4 className=\"title\">模型树</h4>\n              <Tree\n                checkable\n                checkStrictly\n                checkedKeys={treeNodeCheckedKeys}\n                selectedKeys={treeNodeSelectKeys}\n                expandedKeys={expandedKeys}\n                onClick={(e) => {\n                  return false;\n                }}\n                onExpand={(e) => {\n                  this.hideSelect = true;\n                  this.setState({\n                    expandedKeys: e,\n                  });\n                }}\n                onCheck={(treeNodeCheckedKeys, e) => {\n                  this.setState({\n                    treeNodeCheckedKeys,\n                  });\n                  window.setModelVisible(\n                    this.findleafIndexs(e.node.props.dataRef),\n                    e.checked\n                  );\n                  // 模型树隐藏时 dofeel\n                  const ms = this.state.treeNodeSelectKeys;\n                  if (ms * 1 === e.node.props.dataRef.key) {\n                    window.pickObjectVisible = e.checked;\n                    window.setPickObjectParameters();\n                  }\n                  //\n                }}\n              >\n                {this.renderTreeNodes(treeData)}\n              </Tree>\n            </div>\n            <div>\n              <h4 className=\"title\">标注</h4>\n              <Tree onSelect={(e) => this.handleCMSetAnnotVisibleInView(e)}>\n                {this.renderPMITree(PMITreeData)}\n              </Tree>\n            </div>\n          </div>\n        ) : (\n          <>\n            <h4 className=\"title\">参数</h4>\n            <Table\n              className=\"attrTable\"\n              columns={columns}\n              dataSource={paramsData}\n              locale={{ emptyText: \"无数据\" }}\n              size=\"middle\"\n            />\n          </>\n        )}\n      </>\n    );\n  }\n\n  renderTabBar(DefaultTabBarProps, DefaultTabBar) {\n    return <DefaultTabBar {...DefaultTabBarProps} />;\n  }\n\n  renderTreeNodes(treeData) {\n    if (!treeData.length) return null;\n    return treeData.map((item) => {\n      if (item.child) {\n        return (\n          <TreeNode\n            checkable={true}\n            title={this.renderTitle(item)}\n            key={item.key}\n            dataRef={item}\n          >\n            {this.renderTreeNodes(item.child)}\n          </TreeNode>\n        );\n      }\n      return (\n        <TreeNode\n          checkable={true}\n          key={item.key}\n          title={item.title}\n          {...item}\n          dataRef={item}\n        />\n      );\n    });\n  }\n\n  renderTitle(item) {\n    const key = item.key + \"\";\n    return (\n      <span\n        className={\n          this.state.treeNodeSelectKeys.indexOf(key) > -1 ? \"tree_selected\" : \"\"\n        }\n        onClick={() => {\n          // 选择模型名称时 dofeel\n          if (this.keyCode) return;\n          this.hideSelect = true;\n          this.tempMutilpSelect = this.findleafIndexs(item);\n          this.setState({\n            treeNodeSelectKeys: [key],\n            paramsData: item.params,\n          });\n          window.pickModelByIndex(this.tempMutilpSelect, IsPhone());\n          window.setPickObjectParameters();\n        }}\n        onMouseDown={() => {\n          if (this.keyCode === 17) {\n            let { treeNodeSelectKeys } = this.state;\n\n            const leafKeys = this.findleafIndexs(item);\n\n            if (treeNodeSelectKeys.indexOf(key) > -1) {\n              // 已选择，取消选择\n              treeNodeSelectKeys = treeNodeSelectKeys.filter(\n                (item) => item !== key\n              );\n              // 临时多选\n              this.tempMutilpSelect = this.tempMutilpSelect.filter(\n                (item) => leafKeys.indexOf(item) === -1\n              );\n            } else {\n              treeNodeSelectKeys.push(key);\n              this.tempMutilpSelect = this.tempMutilpSelect.concat(leafKeys);\n            }\n\n            this.hideSelect = true;\n            this.setState({\n              treeNodeSelectKeys,\n              paramsData: [],\n            });\n\n            window.pickModelByIndex(this.tempMutilpSelect, IsPhone());\n            // 多选 dofeel\n            window.setPickObjectParameters();\n          }\n        }}\n      >\n        {item.title}\n      </span>\n    );\n  }\n\n  //   scleStreamReady\n  loadTree() {\n    const treeData = [this.getTreeNodeData(window.g_GLData.GLModelTreeNode)];\n    this.setState({\n      treeData,\n      treeNodeCheckedKeys: this.keys,\n    });\n    this.keys = null;\n    const { expandedKeys } = this.getExpandedAndSelctKeys(treeData, [-1]);\n    this.setState({\n      expandedKeys,\n    });\n  }\n\n  setVisible(visible) {\n    let { treeNodeCheckedKeys } = this.state;\n    treeNodeCheckedKeys = treeNodeCheckedKeys.checked || treeNodeCheckedKeys;\n    if (window.pickObjectIndexs === null) {\n      return;\n    }\n    const visibleKeys = this.setTreeVisible(\n      this.state.treeData,\n      window.pickObjectIndexs,\n      visible\n    );\n    treeNodeCheckedKeys = visible\n      ? treeNodeCheckedKeys.concat(visibleKeys)\n      : treeNodeCheckedKeys.filter((item) => visibleKeys.indexOf(item) < 0);\n    this.setState({\n      treeNodeCheckedKeys,\n    });\n  }\n\n  setTreeVisible(data, keys, visible, visibleKeys = []) {\n    for (let i = 0; i < data.length; i++) {\n      if (keys.indexOf(data[i].objIndex) > -1) {\n        visibleKeys.push(data[i].key + \"\");\n      }\n      if (data[i].child.length) {\n        this.setTreeVisible(data[i].child, keys, visible, visibleKeys);\n      }\n    }\n    return visibleKeys;\n  }\n  /**\n   *\n   * @param data\n   * @param leafIndexs  叶子的index []\n   */\n  getExpandedAndSelctKeys(data, leafIndexs) {\n    let findParentKeys = this.findParentKeys(data, leafIndexs),\n      expandedKeys = [],\n      treeNodeSelectKeys = [];\n\n    findParentKeys.forEach((item) => {\n      const { parentKeys } = item;\n      treeNodeSelectKeys.push(parentKeys[parentKeys.length - 1]);\n      expandedKeys = expandedKeys.concat(item.parentKeys);\n    });\n\n    // 去重展开的key\n    expandedKeys = new Set(expandedKeys);\n    expandedKeys = Array.from(expandedKeys);\n\n    return {\n      expandedKeys,\n      treeNodeSelectKeys,\n      item: findParentKeys,\n    };\n  }\n\n  findParentKeys(data, objIndexs, key = []) {\n    if (!objIndexs.length) return key;\n    for (let i = 0; i < data.length; i++) {\n      const node = data[i];\n      const index = objIndexs.indexOf(node.objIndex);\n      if (index > -1) {\n        key.push(node);\n        objIndexs.filter((item) => item !== node.objIndex);\n      } else if (node.child && node.child.length) {\n        this.findParentKeys(node.child, objIndexs, key);\n      }\n    }\n    return key;\n  }\n\n  pickObjectParameters = () => {\n    const notPickModel = !window.pickObjectIndexs || (window.pickObjectIndexs && !window.pickObjectIndexs.length)\n    this.handleInitPMI(!notPickModel)\n\n    if (notPickModel) {\n      this.setState({\n        treeNodeSelectKeys: [],\n        // isVisible: !!window.pickObjectVisible,\n        // alphaRange: window.pickObjectTransparent,\n      });\n      return;\n    }\n    const { expandedKeys, treeNodeSelectKeys, item } =\n      this.getExpandedAndSelctKeys(\n        this.state.treeData,\n        window.pickObjectIndexs\n      );\n\n    this.SetTreeNodePmiView(item[0].nodeid);\n\n    this.setState({\n      expandedKeys,\n      treeNodeSelectKeys,\n      paramsData: item.length === 1 ? item[0].params : [],\n      // isVisible: !!pickObjectVisible,\n      // alphaRange: pickObjectTransparent\n    });\n  };\n\n  renderPMITree(treeData) {\n    if (!treeData.length) return null;\n    return treeData.map((item) => {\n      if (item.child) {\n        return (\n          <TreeNode title={item.name} key={item.key} dataRef={item}>\n            {this.renderPMITree(item.child)}\n          </TreeNode>\n        );\n      }\n      return (\n        <TreeNode key={item.key} title={item.name} {...item} dataRef={item} />\n      );\n    });\n  }\n\n  SetTreeNodePmiView(nodeid) {\n    let cmlib = window.CM_LIB;\n    let arrViewId = cmlib.CMGetAnnotViewIDByTreeID(nodeid);\n    const notPickModel = arrViewId === null || arrViewId.length <= 0;\n\n    if (notPickModel) return;\n\n    const pmiTree = arrViewId.map((id) => {\n      const name = cmlib.CMGetAnnotViewName(id);\n      const arrAnnotId = cmlib.CMGetAnnotIDInView(id);\n\n      return {\n        name,\n        key: \"view\" + id,\n        child: arrAnnotId.map((i) => {\n          return {\n            name: cmlib.CMGetAnnotName(i),\n            key: \"annotid\" + i,\n          };\n        }),\n      };\n    });\n    this.setState({\n      PMITreeData: pmiTree,\n    });\n\n    console.log(pmiTree);\n    // let viewName = cmlib.CMGetAnnotViewName(arrViewId[0]);\n\n    // let arrAnnotId = cmlib.CMGetAnnotIDInView(arrViewId[0]);\n    // let annotViewId = cmlib.CMGetViewIDByAnnotID(arrAnnotId[0]);\n    // let annotName = cmlib.CMGetAnnotName(arrAnnotId[0]);\n    // let annotType = cmlib.CMGetAnnotType(arrAnnotId[0]);\n    // let annotVisible = cmlib.CMIsAnnotVisible(arrAnnotId[0]);\n    cmlib.CMSetAnnotVisibleInView(arrViewId, true);\n  }\n\n  handleCMSetAnnotVisibleInView(treeNodeIds) {\n    let cmlib = window.CM_LIB;\n    cmlib.CMSetAnnotVisibleInView(treeNodeIds, true);\n  }\n\n\n  handleInitPMI(bl) {\n    let cmlib = window.CM_LIB;\n\n    if (bl) {\n      cmlib.CMInitPmi();\n    } else {\n      cmlib.CMResetPmiDispColor();\n      cmlib.CMUnInitPmi();\n    }\n  }\n\n  getTreeNodeData(item, parentKeys = []) {\n    this.key += 1;\n    parentKeys = parentKeys.concat(this.key + \"\");\n    if (item._bVisible) this.keys.push(`${this.key}`);\n    return {\n      key: this.key,\n      parentKeys,\n      nodeid: item._uTreeNodeID,\n      treeid: item._uJSTreeID,\n      title: item._strName,\n      params: this.getTreeNodeParams(item._arrNodeParameters),\n      objIndex: item._uObjectIndex,\n      originVisible: item._bVisibleOriginal,\n      visible: item._bVisible,\n      TriangleCount: item._uObjectTriangleCount,\n      child: this.processTreeData(item._arrSubNode, parentKeys),\n    };\n  }\n\n  processTreeData(treeData, parentKeys) {\n    // console.log(treeData);\n    if (!treeData || !treeData.length) return [];\n    return treeData.map((item) => this.getTreeNodeData(item, parentKeys));\n  }\n\n  getTreeNodeParams(arrParmas) {\n    return arrParmas.map((item) => ({\n      name: item._strName,\n      value: item._strValue,\n    }));\n  }\n\n  findleafIndexs = (data) => {\n    let indexs = [];\n    if (data.child && data.child.length) {\n      data.child.map(\n        (item) => (indexs = indexs.concat(this.findleafIndexs(item)))\n      );\n      return indexs;\n    } else {\n      indexs.push(data.objIndex);\n      return indexs;\n    }\n  };\n\n  disableContextmenu = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  };\n  keyup = (e) => {\n    this.keyCode = 0;\n    if (this.state.multipleSelcet) {\n      this.setState({\n        multipleSelcet: false,\n      });\n    }\n  };\n  keydown = (e) => {\n    if (e.keyCode === 17) {\n      this.keyCode = 17;\n\n      this.setState({\n        multipleSelcet: true,\n      });\n    }\n  };\n  //   ---------------------\n  componentDidMount() {\n    if (window.g_GLData) {\n      this.loadTree();\n    } else {\n      window.addEventListener(\"scleStreamReady\", () => this.loadTree(), {\n        passive: false,\n      });\n    }\n    window.setVisibleTree = this.setVisible.bind(this);\n    window.addEventListener(\"pickParams\", this.pickObjectParameters, {\n      passive: false,\n    });\n    window.addEventListener(\"keydown\", this.keydown);\n    window.addEventListener(\"keyup\", this.keyup);\n    document.addEventListener(\"contextmenu\", this.disableContextmenu);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"scleStreamReady\", this.loadTree.bind(this), {\n      passive: false,\n    });\n\n    window.removeEventListener(\"pickParams\", this.pickObjectParameters, {\n      passive: false,\n    });\n    document.removeEventListener(\"contextmenu\", this.disableContextmenu);\n    window.removeEventListener(\"keyup\", this.keyup);\n    window.removeEventListener(\"keydown\", this.keydown);\n  }\n}\n","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleView.js",["34"],"import React, { useEffect, useRef, useState, useReducer } from 'react';\nimport { message, Popover, Progress, Table, Input, Icon, Tooltip } from 'antd';\nimport { get, queryString } from '../utils';\nimport ScleToolsBar from './scleTools/scleToolsBar';\n// import ScleTools from './scleTools'\nimport { IsPhone } from '../utils/Browser';\nimport SC from './scleControl';\nimport { scleCustomEvent } from '../utils';\nimport './scle.less';\n\nlet scleControl = SC;\n// .default\nconst logo = require('../assets/images/downloadAppIcon.png').default;\n\nconst API = {};\n\nfunction ScleView() {\n\tconst [isFullScreen, setFullscreen] = useState(false);\n\tconst [loading, setLoading] = useState(true);\n\t// const [isHttp] = useState(window.location.origin.startsWith('http'));\n\tconst [isHttp] = useState(window.location.href.includes('link='));\n\tconst [percent, setPercent] = useState(0);\n\tconst obj = useRef({});\n\tconst [notation, setNotation] = useReducer((state, action) => {\n\t\tobj.current = Object.assign({}, state, action.payload);\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.payload,\n\t\t};\n\t}, {});\n\n\tconst [showTools, toggleTools] = useState(true);\n\n\tconst [coordinates, setCoordinates] = useState({\n\t\tcontent: '',\n\t\tx: 0,\n\t\ty: 0,\n\t});\n\n\tconst [input, setInputText] = useState(null);\n\n\tconst setCoords = (state) => {\n\t\tsetCoordinates(Object.assign(coordinates, state));\n\t};\n\n\tconst [visible, setVisible] = useState(false);\n\tconst downloadMsg = [\n\t\t'模型下载中...',\n\t\t'模型打开中,请稍等...',\n\t\t'模型下载失败',\n\t];\n\tconst [msgCode, setMsgCode] = useState(0);\n\n\tconst [posInput, setPosInput] = useState({\n\t\tdata: [\n\t\t\t// { value: '10', show: true, disabled: true, style: { top: 20, width: 200 } },\n\t\t\t// { value: '20', show: false, style: { top: 40, width: 200 } },\n\t\t\t// { value: '60', show: true, style: { top: 60, width: 200 } },\n\t\t],\n\t\tshow: false, // 是否显示\n\t});\n\n\t// function showInput() {\n\t//     const option = {\n\t//         data: [\n\t//             { value: '10', show: true, disabled: true, style: { top: 20, width: 200 } },\n\t//             { value: '20', show: false, style: { top: 40, width: 200 } },\n\t//             { value: '60', show: true, style: { top: 60, width: 200 } },\n\t//         ],\n\t//         show: false, // 是否显示\n\t//     }\n\t//     Scle.showCommentInput(option)\n\t// }\n\n\tconst inputOnChange = (e, item, index) => {\n\t\tposInput.data[index].value = e.target.value;\n\t\tconst nState = { ...posInput };\n\t\tsetPosInput(nState);\n\t\tscleControl.commentOnChange &&\n\t\t\tscleControl.commentOnChange(e, nState, item, index);\n\t};\n\n\tconst onSubmit = (e, item, index) => {\n\t\tposInput.data[index].disabled = true;\n\t\tconst nState = { ...posInput };\n\t\tsetPosInput(nState);\n\t\tscleControl.commentOnSubmit &&\n\t\t\tscleControl.commentOnSubmit(e, nState, item, index);\n\t};\n\n\t/**\n\t *\n\t * @param {Object} posInput {show, value, style}\n\t */\n\tconst showInput = (opt = posInput) => {\n\t\tsetPosInput({\n\t\t\t...posInput,\n\t\t\t...opt,\n\t\t\tstyle: {\n\t\t\t\t...posInput.style,\n\t\t\t\t...opt.style,\n\t\t\t},\n\t\t});\n\t};\n\n\tconst containerRef = useRef();\n\n\tconst addScleEvent = () => {\n\t\twindow.isPhone = IsPhone();\n\t\t// containerRef.current.addEventListener('transitionend', function () {\n\t\t// \twindow.canvasOnResize && window.canvasOnResize()\n\t\t// })\n\t\t[\n\t\t\t'fullscreenchange',\n\t\t\t'webkitfullscreenchange',\n\t\t\t'mozfullscreenchange',\n\t\t\t'MSFullscreenChange',\n\t\t].forEach((item, index) => {\n\t\t\twindow.addEventListener(item, () => {\n\t\t\t\tconst isfull =\n\t\t\t\t\tdocument.fullScreen ||\n\t\t\t\t\tdocument.mozFullScreen ||\n\t\t\t\t\tdocument.webkitIsFullScreen ||\n\t\t\t\t\t!!document.msFullscreenElement;\n\t\t\t\tsetFullscreen(isfull);\n\t\t\t\twindow.canvasOnResize();\n\t\t\t});\n\t\t});\n\t};\n\n\tconst addScleAPi = () => {\n\t\t// 暴露出去API方法\n\t\tscleControl.toggleTools = (bl) => toggleTools(bl);\n\t\t// 设置提示信息\n\t\tscleControl.setTips = (options) => {\n\t\t\tif (\n\t\t\t\t!options.objID ||\n\t\t\t\toptions.objID.lenth === 0 ||\n\t\t\t\toptions.objID.filter((i) => i).length === 0\n\t\t\t) {\n\t\t\t\tsetNotation({\n\t\t\t\t\tpayload: { type: null },\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetNotation({\n\t\t\t\tpayload: { ...options, type: options.type || null },\n\t\t\t});\n\t\t\tconst pos = window.getObjectsCenter(options.objID)[0];\n\t\t\t// 设置提示数据\n\t\t\tlet top = pos.y,\n\t\t\t\tleft = pos.x;\n\n\t\t\tif (options.type === 'table') {\n\t\t\t\t// 表格形式\n\t\t\t\ttop = 0;\n\t\t\t\tleft = 0;\n\t\t\t} else if (options.type === 'lead') {\n\t\t\t\t// 引线批注\n\t\t\t\ttop -= 85;\n\t\t\t}\n\t\t\t// 设置批注样式\n\t\t\tsetCoords({\n\t\t\t\ttop,\n\t\t\t\tleft,\n\t\t\t\tcontent: options.content,\n\t\t\t});\n\t\t\tsetVisible(true);\n\t\t};\n\t\t// 刷新\n\t\tscleControl.refreshNotation = (parmas) => {\n\t\t\tif (obj.current.objID) {\n\t\t\t\tscleControl.setTips({ ...obj.current, ...parmas });\n\t\t\t}\n\t\t};\n\t\t// 设置是否显示提示信息\n\t\tscleControl.setTipsVisible = (bl) => {\n\t\t\tsetVisible(bl);\n\t\t};\n\n\t\t//  显示批注输入框\n\t\t// scleControl.showCommentInput = showInput;\n\t\t// // 批注信息输入改变时触发的函数\n\t\t// scleControl.commentOnChange = () => { }\n\t\t// // 批注信息提交时触发的函数\n\t\t// scleControl.commentOnSubmit = () => { }\n\t};\n\n\tconst openScle = () => {\n\t\tlet { title, link, pid, lic } = queryString(window.location.href);\n\t\tdocument.title = title || '三维模型';\n\t\tif (pid) {\n\t\t\treturn openNetSCle(pid, lic);\n\t\t}\n\t\tif (link) {\n\t\t\twindow.g_strResbaseUrl = link.replace(/(.scle|.zip|.cle)$/, '/');\n\t\t\twindow.CMOnlineUI.getByRequest(link);\n\t\t\treturn;\n\t\t} else {\n\t\t\tmessage.warning('请输入正确的链接');\n\t\t}\n\t};\n\n\tconst openNetSCle = async function (pid, lic) {\n\t\tlet files;\n\t\ttry {\n\t\t\tfiles = await get(API.fileInfo.cle, { pid, lic });\n\t\t} catch (error) { }\n\n\t\tif (files.success) {\n\t\t\tlet { cle } = files.data;\n\t\t\twindow.g_strResbaseUrl = cle.replace(/(.cle)$/, '/');\n\t\t\t// // getByRequest(cle.replace(/(.cle)$/, '.scle'))\n\t\t\t// getByRequest('../../src/assets/68b0.scle')\n\t\t\t// canvasOnResize()\n\t\t\twindow.CMOnlineUI.getByRequest(cle.replace(/(.cle)$/, '.scle'));\n\t\t\t//\n\t\t\t// window.Scle.getByRequest('../../src/assets/68b0.scle')\n\t\t} else {\n\t\t\tmessage.error(files.faildesc);\n\t\t}\n\t};\n\n\tconst onProgress = ({ detail: evt }) => {\n\t\tif (evt.lengthComputable) {\n\t\t\tlet percentComplete = evt.loaded / evt.total;\n\t\t\twindow.g_nCleBufferlength = evt.total;\n\n\t\t\tsetPercent(Math.floor(percentComplete * 100));\n\n\t\t\tif (percentComplete === 1) {\n\t\t\t\tsetMsgCode(1);\n\t\t\t\tloadingChange(false);\n\t\t\t}\n\t\t}\n\n\t\tif (evt.target.status === 404) {\n\t\t\tsetMsgCode(2);\n\t\t}\n\t};\n\n\tconst loadingChange = (b) => {\n\t\tsetLoading(b);\n\t\twindow.canvasOnResize && window.canvasOnResize();\n\t};\n\n\tuseEffect(() => {\n\t\t// const cmcallbacks = new window.CM_CALLBACKS();\n\t\t// window.CM_LIB = new window.CMOnlineLib(\n\t\t// \tcontainerRef.current,\n\t\t// \tcmcallbacks\n\t\t// );\n\t\t//\n\n\t\twindow.addEventListener('updateProgress', onProgress);\n\t\twindow.addEventListener('transferFailed', () => setMsgCode(2));\n\n\t\t// eslint-disable-next-line\n\t\tloadCMOnlineLib(function(isErr, errJSFileUrl) {\n\t\t\t// 错误处理\n\t\t\tif (isErr) {\n\t\t\t\tconsole.error('加载模型库依赖失败！');\n\t\t\t\tconsole.error('失败的 JS 文件地址：', errJSFileUrl);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\twindow.CMOnlineView.default.install(window.Vue);\n\t\t\tnew window.Vue({\n\t\t\t\tel: '#CMOnlineUI_container',\n\t\t\t});\n\t\t\twindow.CM_LIBReady = false;\n\t\t\t// 重新赋值指针\n\t\t\tscleControl = window.CMOnlineUI;\n\n\t\t\t// 创建内部UI对象\n\t\t\t// var UI_Container = document.createElement('div');\n\t\t\t// UI_Container.id ='CMOnlineUI_container';\n\t\t\t// containerRef.current.appendChild(UI_Container);\n\t\t\tscleCustomEvent('scleViewOnload');\n\t\t\tasyncLoad()\n\t\t})\n\n\t\tfunction asyncLoad() {\n\t\t\tconsole.log(window.CM_CALLBACKS);\n\t\t\tif (window.CM_CALLBACKS) {\n\t\t\t\tconst cmcallbacks = new window.CM_CALLBACKS();\n\t\t\t\tcmcallbacks.CMOnLoadModelEndCallback = function () {\n\t\t\t\t\tscleCustomEvent('CMOnLoadModelEndCallback');\n\t\t\t\t\tscleControl.loadEnd();\n\t\t\t\t}\n\t\t\t\tconst cmsettings = new window.CM_SETTINGS();\n\t\t\t\twindow.CM_LIB = new window.CMOnlineLib(\n\t\t\t\t\tcontainerRef.current,\n\t\t\t\t\tcmcallbacks,\n\t\t\t\t\tcmsettings\n\t\t\t\t);\n\n\t\t\t\twindow.CM_LIB.CMSetUserCanCommentFlag(1);\n\t\t\t\twindow.CM_LIB.CMSetCommentUsrName('test');\n\t\t\t\tif (isHttp) openScle();\n\t\t\t\taddScleAPi();\n\t\t\t\twindow.CM_LIBReady = true;\n\t\t\t} else {\n\t\t\t\tconsole.log('加载CM_CALLBACKS失败');\n\t\t\t\twindow.location.reload()\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\twindow.addEventListener('scleStreamReady', () => {\n\t\t\tloadingChange(false);\n\t\t\taddScleEvent();\n\t\t});\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\tscleControl.refreshNotation();\n\t\t});\n\n\t\t\n\t}, []);\n\n\tconst onVisibleChange = () => {\n\t\tif (notation.type === 'table') {\n\t\t\t// setNotation({\n\t\t\t// \ttype: null\n\t\t\t// })\n\t\t} else {\n\t\t\tsetVisible(false);\n\t\t}\n\t};\n\n\t// 用户设置值\n\tconst confirmValue = () => {\n\t\t// setCoords({\n\t\t//     ...coordinates,\n\t\t//     input: false,\n\t\t//     content: coordinates.newContent,\n\t\t// })\n\t\tsetCoords({\n\t\t\tcontent: input,\n\t\t});\n\t\tsetInputText(null);\n\t};\n\n\tfunction renderCommentItem(item, index) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={index}\n\t\t\t\tclassName=\"annotationInput\"\n\t\t\t\tonDoubleClick={() => {\n\t\t\t\t\tposInput.data[index].disabled = false;\n\t\t\t\t\tshowInput({ ...posInput });\n\t\t\t\t}}\n\t\t\t\tstyle={item.style}\n\t\t\t>\n\t\t\t\t<Input\n\t\t\t\t\t// onDoubleClick={() => showInput({ disabled: !posInput.disabled })}\n\t\t\t\t\tdisabled={item.disabled}\n\t\t\t\t\tvalue={item.value}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tinputOnChange(e, item, index);\n\t\t\t\t\t}}\n\t\t\t\t\tautoFocus\n\t\t\t\t\taddonAfter={\n\t\t\t\t\t\t!item.disabled ? (\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\ttype=\"check\"\n\t\t\t\t\t\t\t\tonClick={(e) => onSubmit(e, item, index)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null\n\t\t\t\t\t}\n\t\t\t\t/>{' '}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tfunction renderComment(item, index) {\n\t\tif (item.show === false) return null;\n\t\tif (\n\t\t\titem.disabled === true &&\n\t\t\t(item._strUsrName || item._strCreateTime)\n\t\t) {\n\t\t\treturn (\n\t\t\t\t<Tooltip\n\t\t\t\t\tkey={index}\n\t\t\t\t\ttitle={\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div>作 者：{item._strUsrName}</div>\n\t\t\t\t\t\t\t<div>创建时间：{item._strCreateTime}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{renderCommentItem(item, index)}\n\t\t\t\t</Tooltip>\n\t\t\t);\n\t\t} else {\n\t\t\treturn renderCommentItem(item, index);\n\t\t}\n\t}\n\treturn (\n\t\t<div\n\t\t\tclassName={isFullScreen ? 'fullScreen container' : 'container'}\n\t\t\tref={containerRef}\n\t\t>\n\t\t\t<div id=\"CMOnlineUI_container\">\n\t\t\t\t<c-m-online-view />\n\t\t\t</div>\n\t\t\t{/* <>\n                <canvas id=\"glcanvas\" width=\"800\" height=\"600\"></canvas>\n                <canvas id=\"text\" width=\"800\" height=\"600\"></canvas>\n            </> */}\n\t\t\t{posInput.show !== false ? posInput.data.map(renderComment) : null}\n\t\t\t{loading ? (\n\t\t\t\t<div className=\"scle_loading\">\n\t\t\t\t\t{isHttp ? (\n\t\t\t\t\t\t<div className=\"scle_loadImg\">\n\t\t\t\t\t\t\t<img src={logo} alt=\"loading\" />\n\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\tstrokeColor={{\n\t\t\t\t\t\t\t\t\t'0%': '#108ee9',\n\t\t\t\t\t\t\t\t\t'100%': '#87d068',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tpercent={percent}\n\t\t\t\t\t\t\t\tstatus=\"active\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p>{downloadMsg[msgCode]}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\tshowTools && <ScleToolsBar></ScleToolsBar>\n\t\t\t\t// showTools && <ScleTools></ScleTools>\n\t\t\t)}\n\t\t\t{visible && notation.type !== null && (\n\t\t\t\t<Popover\n\t\t\t\t\tcontent={\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{input === null ? (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tonDoubleClick={() => {\n\t\t\t\t\t\t\t\t\t\t// setInputText(coordinates.content)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{coordinates.content}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tsetInputText(e.target.value)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\taddonAfter={\n\t\t\t\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\t\t\t\ttype=\"check\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={confirmValue}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdefaultValue={coordinates.content}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t\ttitle={null}\n\t\t\t\t\tplacement=\"top\"\n\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\tvisible={true}\n\t\t\t\t\toverlayClassName={`scleViewPopver ${notation.type === 'lead' ? 'hideArrow' : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\tonVisibleChange={onVisibleChange}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`gltext ${notation.type === 'lead' ? 'gltext2' : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop: coordinates.top,\n\t\t\t\t\t\t\tleft: coordinates.left,\n\t\t\t\t\t\t}}\n\t\t\t\t\t></div>\n\t\t\t\t</Popover>\n\t\t\t)}\n\n\t\t\t{notation.type === 'table' && (\n\t\t\t\t<div className=\"gltext\" style={notation.tableStyle}>\n\t\t\t\t\t<Table {...notation} rowKey=\"index\" />\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* getobjectscenter */}\n\t\t</div>\n\t);\n}\n\nexport default ScleView;\n","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleTools/scleToolsBar.js",["35"],"import {\n\tDrawer,\n\tIcon,\n\tmessage,\n\tnotification,\n\tPopover,\n\tRadio,\n\tSlider,\n\tTabs,\n\tCheckbox,\n\tSwitch,\n\tTooltip,\n\tButton\n} from 'antd'\nimport { PureComponent } from 'react'\nimport { ChromePicker } from 'react-color'\nimport {\n\tfullScreen,\n\texitFullscreen,\n\tIEVersion,\n\tIsPhone\n} from '../../utils/Browser'\nimport ScleAttrTree from '../scleAttrTree/ScleAttrTree'\n\nimport './scleTools.less'\nimport { scleCustomEvent } from '../../utils'\nimport { DoubleRightOutlined, DoubleLeftOutlined,SwitcherOutlined } from '@ant-design/icons';\n\n\n\nconst IconFont = Icon.createFromIconfontCN({\n\t// scriptUrl: '//at.alicdn.com/t/font_1616415_u6ht57qahg.js'\n\tscriptUrl: './CMOnlineToolkit/localiconfont/iconfont.js'\n})\nconst { TabPane } = Tabs\n\nmessage.config({\n\tmaxCount: 1\n})\nexport default class scleTools extends PureComponent {\n\t#tools = [\n\t\t{ type: 'home', title: '复位', onClick: () => window.setHome() },\n\t\t{\n\t\t\ttype: 'drag',\n\t\t\ttitle: '移动零件'\n\t\t\t// onClick: () => this.isPickNull(() => window.moveModel())\n\t\t},\n\t\t// {\n\t\t// \ttype: 'font-colors',\n\t\t// \ttitle: '批注',\n\t\t// \tpopover: () => this.renderAnnotation()\n\t\t// },\n\t\t// {\n\t\t// \ttype: 'apartment',\n\t\t// \ttitle: '模型树',\n\t\t// \tonClick: () => this.drawerToggle()\n\t\t// },\n\t\t{ type: 'eye-invisible', title: '隐藏', key: \"show\" },\n\t\t{ type: 'bg-colors', resetTheme: true, title: '颜色', popover: () => this.renderColor() },\n\t\t{\n\t\t\ttype: 'icon-toumingdu',\n\t\t\ttitle: '透明度',\n\t\t\tisFont: true,\n\t\t\tkey: \"toumingdu\",\n\t\t\tpopover: () => this.renderSlider()\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-background-l',\n\t\t\t// title: \"背景色\",\n\t\t\tisFont: true,\n\t\t\tpopover: () => this.renderBackground()\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-box',\n\t\t\tisFont: true,\n\t\t\tpopover: () => this.renderViewDire()\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-shitupouqiehe',\n\t\t\tisFont: true,\n\t\t\tonClick: () => this.handleOpenSectionNotification()\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-a-ziyuan10',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\twindow.startMeasureMode();\n\t\t\t\tthis.setState({\n\t\t\t\t\ttools: [...this.#measurement]\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\t\n\t\t{\n\t\t\ttype: 'play-circle',\n\t\t\ttitle: '播放',\n\t\t\tonClick: () => {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttools: [...this.#playerTools]\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\t\t\n\t\t\t{ type: 'fullscreen', title: '全屏',key: \"fullscreen\", }\n\t]\n\n\n\t#measurement = [\n\t\t{\n\t\t\ttype: 'icon-lingjian',\n\t\t\tisFont: true,\n\t\t\ttitle: '零件测量',\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_OBJECT)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-qumian',\n\t\t\ttitle: '曲面测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\tconsole.log(window.setMeasureMode);\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_SURFACE)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-quxian',\n\t\t\ttitle: '曲线测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_CURVE)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-min_quxianceliang',\n\t\t\ttitle: '曲线与曲线测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_TWO_CURVES)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-zuobiaoceliang',\n\t\t\ttitle: '点测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_POINT)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-dianceliang',\n\t\t\ttitle: '点与点测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureMode(MEASURE_TWO_POINTS)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-qingchuceliang1',\n\t\t\ttitle: '取消测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.cancelMeacureMode()\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-yincang',\n\t\t\ttitle: '隐藏测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureUnitVisible(-2, false)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-xianshi',\n\t\t\ttitle: '显示测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.setMeasureUnitVisible(-1, true)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-shanchuceliang',\n\t\t\ttitle: '删除测量',\n\t\t\tisFont: true,\n\t\t\tonClick: () => {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\twindow.deleteMeasureUnit(-2)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'poweroff',\n\t\t\ttitle: '退出测量',\n\t\t\tonClick: () => {\n\t\t\t\tthis.exitMeasurement()\n\t\t\t\twindow.cancelMeacureMode()\n\t\t\t}\n\t\t}\n\t]\n\n\t#playerTools = [\n\t\t{\n\t\t\ttype: 'pause-circle',\n\t\t\ttitle: '暂停'\n\t\t},\n\t\t{\n\t\t\ttype: 'renderPlayerBar',\n\t\t\ttabComponent: () => this.renderPlayerBar()\n\t\t},\n\t\t{\n\t\t\ttype: 'icon-Stop',\n\t\t\tisFont: true,\n\t\t\ttitle: '停止',\n\t\t\tonClick: () => this.playerStop()\n\t\t}\n\t]\n\n\tstate = {\n\t\tactiveTab: null,\n\t\ttools: [...this.#tools],\n\t\tbackground: {\n\t\t\t// 调色板\n\t\t\tr: 255,\n\t\t\tg: 0,\n\t\t\tb: 0,\n\t\t\ta: 1\n\t\t},\n\t\tplayPercent: 0,\n\t\talpha: 1,\n\t\tdrawerVisible: false,\n\t\tshowParams: false,\n\t\tshowSectioning:false\n\n\t}\n\tisMove = false\n\ttotalFrames = 0\n\n\tcomponentDidMount() {\n\t\twindow.isPhone = IsPhone()\n\n\t\t\t// window.addEventListener(\"fullscreenchange\", () =>\n\t\t\t//   this.fullScreenHandle(!!document.fullscreenElement)\n\t\t\t// );\n\t\t\t// // IE\n\t\t\t// window.addEventListener(\"MSFullscreenChange\", () =>\n\t\t\t//   this.fullScreenHandle(document.msFullscreenElement != null)\n\t\t\t// );\n\t\t\t;[\n\t\t\t\t'fullscreenchange',\n\t\t\t\t'webkitfullscreenchange',\n\t\t\t\t'mozfullscreenchange',\n\t\t\t\t'MSFullscreenChange'\n\t\t\t].forEach((item, index) => {\n\t\t\t\twindow.addEventListener(item, () => {\n\t\t\t\t\tthis.fullScreenHandle(\n\t\t\t\t\t\tdocument.fullScreen ||\n\t\t\t\t\t\tdocument.mozFullScreen ||\n\t\t\t\t\t\tdocument.webkitIsFullScreen ||\n\t\t\t\t\t\t!!document.msFullscreenElement\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t})\n\t\tif (window.g_GLData) {\n\t\t\tthis.scleStreamReady()\n\t\t}\n\t\twindow.addEventListener(\n\t\t\t'scleStreamReady',\n\t\t\tthis.scleStreamReady.bind(this),\n\t\t\t{\n\t\t\t\tpassive: false\n\t\t\t}\n\t\t)\n\n\t\twindow.addEventListener(\n\t\t\t'pickParams',\n\t\t\tthis.pickObjectParameters.bind(this),\n\t\t\t{ passive: false }\n\t\t)\n\n\t\twindow.addEventListener(\n\t\t\t'resize',\n\t\t\t() => {\n\t\t\t\tconst newTools = this.state.tools.map((i) => {\n\t\t\t\t\ti.visible = false\n\t\t\t\t\treturn i\n\t\t\t\t})\n\t\t\t\tthis.setState({ activeTab: null, tools: [...newTools] })\n\t\t\t},\n\t\t\t{ passive: false }\n\t\t)\n\n\t\twindow.addEventListener('stopAnimation', () => {\n\t\t\t// this.playerStop()\n\t\t\tthis.setState({\n\t\t\t\ttools: [...this.#playerTools]\n\t\t\t})\n\t\t})\n\t}\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\n\t\t\t'scleStreamReady',\n\t\t\tthis.scleStreamReady.bind(this),\n\t\t\t{\n\t\t\t\tpassive: false\n\t\t\t}\n\t\t)\n\t\twindow.removeEventListener(\n\t\t\t'pickParams',\n\t\t\tthis.pickObjectParameters.bind(this),\n\t\t\t{ passive: false }\n\t\t)\n\t\tthis.setState = () => { }\n\t}\n\t//   scleStreamReady\n\tscleStreamReady() {\n\t\tthis.totalFrames = window.getTotalFrames()\n\t\twindow.setAnmiIcon = this.setAnmiIcon\n\t\twindow.getCurFrame = (CurFrame) => this.getCurFrame(CurFrame)\n\t}\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Drawer\n\t\t\t\t\ttitle={null}\n\t\t\t\t\tclosable={false}\n\t\t\t\t\tmask={false}\n\t\t\t\t\tmaskClosable={false}\n\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\twidth=\"auto\"\n\t\t\t\t\tvisible={this.state.drawerVisible}\n\t\t\t\t\tgetContainer={false}\n\t\t\t\t\tbodyStyle={{ padding: 0 }}\n\t\t\t\t\tonClose={() => this.hideDrawer()}\n\t\t\t\t\tclassName=\"cleTreeDrawer\"\n\t\t\t\t\tid=\"cleTreeDrawer\"\n\t\t\t\t>\n\t\t\t\t\t<ScleAttrTree\n\t\t\t\t\t\tref={(el) => (this.sclAttrTree = el)}\n\t\t\t\t\t\tshowParams={this.state.showParams}\n\t\t\t\t\t></ScleAttrTree>\n\t\t\t\t\t<div className=\"expand_box\" onClick={()=>this.drawerToggle()}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.drawerVisible ? <DoubleRightOutlined />: <DoubleLeftOutlined/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</Drawer>\n\t\t\t\t\t{/* <ScleSectioningDrawer visible={this.state.showSectioning}/> */}\n\t\t\t\t<Drawer\n\t\t\t\t\ttitle=\"剖切\"\n\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\tclosable={true}\n\t\t\t\t\tmask={false}\n\t\t\t\t\tonClose={()=>this.handleOpenSectionNotification(false)}\n\t\t\t\t\tmaskClosable={false}\n\t\t\t\t\tvisible={this.state.showSectioning}\n\t\t\t\t\tgetContainer={false}\n\t\t\t\t\tstyle={{ position: 'absolute',height:360 }}\n\t\t\t\t\tbodyStyle={{height:'auto'}}\n\t\t\t\t\tclassName=\"cleTreeDrawer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h4>选择切割面</h4>\n\t\t\t\t\t\t\t<div className=\"checkbox_item\">\n\t\t\t\t\t\t\t\t<Checkbox onChange={(e)=>this.checkedChange(e, 0)}>沿X轴切割</Checkbox>\n\t\t\t\t\t\t\t\t<IconFont className=\"checkbox_item_icon\" type=\"icon-jiaohuanshuju\" onClick={()=>this.CMSetClipRevert(0)}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"checkbox_item\">\n\t\t\t\t\t\t\t\t<Checkbox onChange={(e)=>this.checkedChange(e, 1)} >沿Y轴切割</Checkbox>\n\t\t\t\t\t\t\t\t<IconFont className=\"checkbox_item_icon\" type=\"icon-jiaohuanshuju\" onClick={()=>this.CMSetClipRevert(1)}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"checkbox_item\">\n\t\t\t\t\t\t\t\t<Checkbox onChange={(e)=>this.checkedChange(e, 2)}>沿Z轴切割</Checkbox>\n\n\t\t\t\t\t\t\t\t<IconFont className=\"checkbox_item_icon\" type=\"icon-jiaohuanshuju\" onClick={()=>this.CMSetClipRevert(2)}/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"checkbox_item\">\n\t\t\t\t\t\t\t\t切面隐藏\n\t\t\t\t\t\t\t\t<Switch onChange={(e)=> this.switchChange(e)}/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<Button block style={{marginTop:40}} onClick={()=>this.handleReset()}>全部重置</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t</Drawer>\n\n\t\t\t\t<div className='fixed_left_tools'>\n\t\t\t\t\t<div className={`left_tools_btn ${this.state.drawerVisible && !this.state.showParams ? 'active':''}`} onClick={() => this.handleShowTree()}>\n\t\t\t\t\t\t<Icon type=\"apartment\"/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className={`left_tools_btn ${this.state.drawerVisible && this.state.showParams ? 'active':''}`} onClick={() => this.handleShowParams()}>\n\t\t\t\t\t\t<SwitcherOutlined />\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"scleToolsBar\">\n\t\t\t\t\t<Tabs\n\t\t\t\t\t\tactiveKey={this.state.activeTab}\n\t\t\t\t\t\ttabPosition=\"bottom\"\n\t\t\t\t\t\tanimated={false}\n\t\t\t\t\t\tonChange={(activeTab) => this.setState({ activeTab })}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.renderTools()}\n\t\t\t\t\t</Tabs>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n\n\tcheckedChange(e, index){\n\t\tlet cmlib = window.CM_LIB;\n\t\tsetTimeout(() => {\n\t\t\ttry {\n\t\t\t\tcmlib.CMSetClipEnable(index, e.target.checked);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tswitchChange(e){\n\t\tconsole.log(e);\n\t\tlet cmlib = window.CM_LIB;\n\t\tcmlib.CMSelectClip(0);\n\n\t\tcmlib.CMSelectClip(1);\n\n\t\tcmlib.CMSelectClip(2);\n\n\n\t}\n\n\tCMSetClipRevert(index){\n\t\tlet cmlib = window.CM_LIB;\n\t\t// cmlib.CMSelectClip(index);\n\n\t\tcmlib.CMSetClipRevert(index);\n\t}\n\n\thandleReset(){\n\t\tlet cmlib = window.CM_LIB;\n\n\t\t// cmlib.CMResetClip(0);\n\t\t// cmlib.CMResetClip(1);\n\t\t// cmlib.CMResetClip(2);\n\n\t\t// cmlib.CMSelectClip(-1);\n\t}\n\n\n\t\n\tdrawerToggle() {\n\t\tthis.setState({\n\t\t\tdrawerVisible: !this.state.drawerVisible,\n\t\t\t// showParams:  false\n\t\t\t// activeTab: !this.state.drawerVisible ? this.state.activeTab : null,\n\t\t})\n\t}\n\n\t\n\thandleShowTree(){\n\t\tconst {showParams,drawerVisible} = this.state;\n\t\tthis.setState({\n\t\t\tdrawerVisible: !(drawerVisible && !showParams),\n\t\t\tshowParams:  false\n\t\t})\n\t}\n\n\thandleShowParams (){\n\t\tconst {showParams,drawerVisible} = this.state;\n\t\t\n\t\tthis.setState({\n\t\t\tdrawerVisible: !(drawerVisible && showParams),\n\t\t\tshowParams:  true\n\t\t})\n\t}\n\n\thideDrawer() {\n\t\tthis.setState({\n\t\t\tdrawerVisible: false,\n\t\t\tactiveTab: null\n\t\t})\n\t}\n\n\trenderTools() {\n\t\tconst { tools } = this.state\n\t\treturn tools.map((item, index) => (\n\t\t\t<TabPane\n\t\t\t\ttab={\n\t\t\t\t\titem.tabComponent\n\t\t\t\t\t\t? item.tabComponent(item, index)\n\t\t\t\t\t\t: IsPhone()\n\t\t\t\t\t\t\t? this.renderPopover(item, index)\n\t\t\t\t\t\t\t: this.renderTipsPopover(item, index)\n\t\t\t\t}\n\t\t\t\tkey={item.type}\n\t\t\t></TabPane>\n\t\t))\n\t}\n\n\trenderAnnotation() {\n\t\treturn <div className=\"annotation_icons\">\n\t\t\t<Tooltip title={'创建批注'}>\n\t\t\t\t<Icon\n\t\t\t\t\ttype={'edit'}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\twindow.setUsrCommentMode && window.setUsrCommentMode(1, 1)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t\t<Tooltip title={'取消批注'}>\n\t\t\t\t<Icon\n\t\t\t\t\ttype={'close-circle'}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\twindow.setUsrCommentMode && window.setUsrCommentMode(0, 1)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t\t<Tooltip title={'上传批注'}>\n\t\t\t\t<Icon\n\t\t\t\t\ttype={'cloud-upload'}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\twindow.uploadXmlCommentToCloud && window.uploadXmlCommentToCloud()\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\t\t\t<Tooltip title={'下载批注'}>\n\t\t\t\t<Icon\n\t\t\t\t\ttype={'cloud-download'}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\twindow.syncXmlCommentFromCloud && window.syncXmlCommentFromCloud()\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\n\t\t</div>\n\t}\n\n\n\trenderTipsPopover(item, index) {\n\t\treturn (\n\t\t\t<Tooltip title={item.title}>\n\t\t\t\t{this.renderPopover(item, index)}\n\t\t\t</Tooltip>\n\t\t)\n\t}\n\trenderPopover(item, index) {\n\t\treturn item.popover ? (\n\t\t\t<Popover\n\t\t\t\tcontent={item.popover()}\n\t\t\t\ttrigger=\"click\"\n\t\t\t\tvisible={item.visible}\n\t\t\t\tonVisibleChange={(visible) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.state.activeTab === 'icon-toumingdu' &&\n\t\t\t\t\t\tIsPhone()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tthis.changeVisible(visible, index)\n\t\t\t\t\tif (!visible && item.resetTheme) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tactiveTab: null\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.renderToolsIcon(item, index)}\n\t\t\t</Popover>\n\t\t) : (\n\t\t\tthis.renderToolsIcon(item, index)\n\t\t)\n\t}\n\n\trenderColor() {\n\t\treturn (\n\t\t\t<ChromePicker\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tthis.isPickNull(() => {\n\t\t\t\t\t\tconst { r, g, b, a } = e.rgb\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tbackground: e.rgb\n\t\t\t\t\t\t})\n\t\t\t\t\t\twindow.setMaterialRGBA(r / 255, g / 255, b / 255, a)\n\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t\tcolor={this.state.background}\n\t\t\t></ChromePicker>\n\t\t)\n\t}\n\n\trenderPlayerBar(item, index) {\n\t\treturn (\n\t\t\t<Slider\n\t\t\t\tclassName=\"progressSlider\"\n\t\t\t\tmin={0}\n\t\t\t\tmax={100}\n\t\t\t\tvalue={this.state.playPercent}\n\t\t\t\tkey={index}\n\t\t\t\ttipFormatter={(e) => e + '%'}\n\t\t\t\tonChange={(playPercent) => {\n\t\t\t\t\tthis.setState({ playPercent })\n\n\t\t\t\t\twindow.setCurFrame(this.totalFrames * (playPercent / 100))\n\t\t\t\t}}\n\t\t\t/>\n\t\t)\n\t}\n\n\t// 渲染透明度进度条\n\trenderSlider() {\n\t\treturn (\n\t\t\t<div className=\"transparent\">\n\t\t\t\t<Slider\n\t\t\t\t\tdefaultValue={1}\n\t\t\t\t\tstep={0.1}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tmax={1}\n\t\t\t\t\tvalue={this.state.alpha}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\tthis.isPickNull(() => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\talpha: value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\twindow.setTransparent(value)\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// 渲染背景色\n\trenderBackground() {\n\t\treturn (\n\t\t\t<Radio.Group\n\t\t\t\tdefaultValue=\"0\"\n\t\t\t\tbuttonStyle=\"solid\"\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\twindow.setBackground(e.target.value * 1)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Radio.Button value=\"0\">淡蓝色</Radio.Button>\n\t\t\t\t<Radio.Button value=\"1\">浅白色</Radio.Button>\n\t\t\t\t<Radio.Button value=\"2\">银灰色</Radio.Button>\n\t\t\t</Radio.Group>\n\t\t)\n\t}\n\n\trenderViewDire() {\n\t\tconst bg = { background: 'rgba(24,144,255, 0.6)' }\n\t\tconst viewDirections = [\n\t\t\t{ title: '正视图', value: 0, forward: bg },\n\t\t\t{ title: '后视图', value: 1, back: bg },\n\t\t\t{ title: '左视图', value: 2, left: bg },\n\t\t\t{ title: '右视图', value: 3, right: bg },\n\t\t\t{ title: '俯视图', value: 4, up: bg },\n\t\t\t{ title: '仰视图', value: 5, down: bg },\n\t\t\t{ title: '等轴侧', value: 6, forward: bg, right: bg }\n\t\t]\n\t\treturn (\n\t\t\t<div className=\"DivBox\">\n\t\t\t\t{!IEVersion() ? (\n\t\t\t\t\tviewDirections.map((item) => (\n\t\t\t\t\t\t<DivBox\n\t\t\t\t\t\t\tkey={item.value}\n\t\t\t\t\t\t\t{...item}\n\t\t\t\t\t\t\tonTouchEnd={() => window.setView(item.value)}\n\t\t\t\t\t\t\tonClick={() => window.setView(item.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<Radio.Group\n\t\t\t\t\t\tdefaultValue={0}\n\t\t\t\t\t\tbuttonStyle=\"solid\"\n\t\t\t\t\t\tonChange={(item) => {\n\t\t\t\t\t\t\twindow.setView(item.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{viewDirections.map((item) => (\n\t\t\t\t\t\t\t<Radio.Button value={item.value} key={item.value}>\n\t\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t\t</Radio.Button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Radio.Group>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderToolsIcon(item, index) {\n\t\treturn item.isFont ? (\n\t\t\t<IconFont\n\t\t\t\ttype={item.type}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.changeVisible(!item.visible, index)\n\t\t\t\t\tthis.toolsClickHandle(item, index)\n\t\t\t\t}}\n\t\t\t/>\n\t\t) : (\n\t\t\t<Icon\n\t\t\t\ttype={item.type}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.changeVisible(!item.visible, index)\n\t\t\t\t\tthis.toolsClickHandle(item, index)\n\t\t\t\t}}\n\t\t\t/>\n\t\t)\n\t}\n\n\t// player\n\tplayHandle(item, index) {\n\t\tconst newTools = this.state.tools\n\t\tif (item.type === 'play-circle') {\n\t\t\tnewTools[index] = {\n\t\t\t\ttype: 'pause-circle',\n\t\t\t\ttitle: '暂停'\n\t\t\t}\n\t\t\tnewTools.length ===3 ? window.animRun() : window.setAnimationStart();\n\t\t\t// window.animRun();\n\t\t}\n\t\tif (item.type === 'pause-circle') {\n\t\t\tnewTools[index] = {\n\t\t\t\ttype: 'play-circle',\n\t\t\t\ttitle: '播放'\n\t\t\t}\n\t\t\twindow.animPause()\n\t\t}\n\n\t\tthis.setState({ tools: newTools })\n\t}\n\n\t// 工具栏 触发事件统一处理\n\ttoolsClickHandle(item, index) {\n\t\tconsole.log(item);\n\t\tconst newTools = this.state.tools\n\n\t\tif (item.type === 'eye') {\n\t\t\tthis.isPickNull(() => {\n\t\t\t\tnewTools[index].type = 'eye-invisible'\n\t\t\t\tnewTools[index].title = '隐藏'\n\t\t\t\twindow.setVisible(true)\n\t\t\t\tnewTools[index].pickObjectVisible = true\n\t\t\t\tif (this.sclAttrTree.setVisible) {\n\t\t\t\t\tthis.sclAttrTree.setVisible(true)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (item.type === 'eye-invisible') {\n\t\t\tthis.isPickNull(() => {\n\t\t\t\tnewTools[index].type = 'eye'\n\t\t\t\tnewTools[index].title = '显示'\n\t\t\t\twindow.setVisible(false)\n\t\t\t\tnewTools[index].pickObjectVisible = false\n\t\t\t\tif (this.sclAttrTree.setVisible) {\n\t\t\t\t\tthis.sclAttrTree.setVisible(false)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (item.type === 'pause-circle' || item.type === 'play-circle') {\n\t\t\tthis.playHandle(item, index)\n\t\t}\n\n\t\tif (item.type === 'fullscreen') {\n\t\t\tnewTools[index] = { type: 'fullscreen-exit', title: '退出全屏' }\n\t\t\t//   console.log(this);\n\t\t\t//   this.props.onFullScreen(true);\n\t\t\tfullScreen()\n\t\t\t//   window.canvasOnResize();\n\t\t}\n\t\tif (item.type === 'fullscreen-exit') {\n\t\t\tnewTools[index] = { type: 'fullscreen', title: '全屏' }\n\t\t\t//   this.props.onFullScreen(false);\n\t\t\texitFullscreen()\n\t\t}\n\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\ttools: [...newTools]\n\t\t\t},\n\t\t\t() => {\n\t\t\t\titem.onClick && item.onClick()\n\t\t\t\tif (item.type === 'drag') {\n\t\t\t\t\t// onClick: () => this.isPickNull(() => window.moveModel())\n\t\t\t\t\tif (this.state.activeTab && this.isMove) {\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tactiveTab: null\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.moveHandle()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.isPickNull(() => {\n\t\t\t\t\t\t\tthis.moveHandle()\n\t\t\t\t\t\t\tif (!IsPhone()) {\n\t\t\t\t\t\t\t\tnotification.info({\n\t\t\t\t\t\t\t\t\tmessage: '移动操作',\n\t\t\t\t\t\t\t\t\tdescription: '使用Ctrl+鼠标左键，移动模型。',\n\t\t\t\t\t\t\t\t\tduration: 3,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.isMove && !item.type.startsWith('eye')) {\n\t\t\t\t\t\tthis.moveHandle()\n\t\t\t\t\t}\n\t\t\t\t\tif (item.type.startsWith('eye') && this.isMove) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tactiveTab: 'drag'\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t// console.log(this.isMove);\n\n\t\t\t}\n\t\t)\n\t}\n\n\tmoveHandle() {\n\t\twindow.moveModel()\n\t\tthis.isMove = !this.isMove\n\t}\n\n\tfullScreenHandle(fullScreen) {\n\t\tconst icon = fullScreen ? 'fullscreen-exit' : 'fullscreen'\n\t\tconst newTools = this.state.tools\n\t\tconst [fullScreenIndex] = this.findToolsIndex(['fullscreen']);\n\t\tnewTools[fullScreenIndex].type = icon\n\t\tthis.setState({ tools: [...newTools], activeTab: null })\n\t}\n\n\tpickObjectParameters() {\n\n\t\tif(window.pickObjectVisible === null) return;\n\n\t\tconst [visibleIndex, alphaIndex] = this.findToolsIndex(['show', 'toumingdu']);\n\t\tconst newTools = this.state.tools\n\t\t// \n\t\tconst icon = window.pickObjectVisible ? 'eye-invisible' : 'eye'\n\t\tnewTools[visibleIndex].type = icon\n\t\tnewTools[visibleIndex].title = icon === 'eye' ? '显示' : '隐藏'\n\n\t\t// \n\t\tnewTools[alphaIndex].visible = false\n\n\t\tthis.setState({\n\t\t\ttools: [...newTools],\n\t\t\talpha: window.pickObjectTransparent || 0\n\t\t})\n\n\t}\n\n\thandleOpenSectionNotification(show){\n\t\tconst showSectioning = show !== undefined ? !!show : !this.state.showSectioning\n\t\tthis.setState({\n\t\t\tshowSectioning, \n\t\t\tactiveTab: showSectioning? 'icon-shitupouqiehe': null\n\t\t})\n\n\t\tconst cmlib = window.CM_LIB;\n\t\tsetTimeout(()=>{\n\t\t\ttry {\n\t\t\t\tconsole.log('loadStart', Date.now());\n\t\t\t\tshowSectioning ? cmlib.CMInitSection() : cmlib.CMUnInitSection();  \n\t\t\t\tconsole.log('loadend', Date.now());\n\t\t\t} catch (error) {\n\t\t\t}\n\t\t})\n\t\t\n\t}\n\n\tfindToolsIndex(keys){\n\t\treturn keys.map(key => this.#tools.findIndex(i=>i.key === key))\n\t}\n\n\t//   停止播放\n\tplayerStop() {\n\t\tscleCustomEvent('playerStop')\n\t\twindow.animTerminal()\n\t\tthis.setState({\n\t\t\ttools: [...this.#tools]\n\t\t})\n\t}\n\n\t// 退出测量\n\texitMeasurement() {\n\t\tthis.setState({\n\t\t\ttools: [...this.#tools]\n\t\t})\t\n\t}\n\n\tchangeVisible(visible, index) {\n\t\tconst newTools = this.state.tools\n\t\tnewTools[index].visible = visible\n\t\tthis.setState({\n\t\t\ttools: [...newTools]\n\t\t})\n\t}\n\n\tisPickNull = (callback = () => { }) => {\n\t\tif (window.getPickStatus() < 1) {\n\t\t\tthis.setState({\n\t\t\t\tactiveTab: null\n\t\t\t})\n\t\t\treturn message.info('需先选中模型')\n\t\t}\n\t\tcallback()\n\t}\n\n\t// 需要暴露到window的方法\n\tsetAnmiIcon = (isPause) => {\n\t\tconst newTools = this.state.tools\n\t\tconst newStatus = isPause\n\t\t\t? {\n\t\t\t\ttype: 'play-circle',\n\t\t\t\ttitle: '播放'\n\t\t\t}\n\t\t\t: {\n\t\t\t\ttype: 'pause-circle',\n\t\t\t\ttitle: '暂停'\n\t\t\t}\n\n\t\tthis.setState({\n\t\t\ttools: newTools.map((item) => {\n\t\t\t\tif (\n\t\t\t\t\titem.type === 'pause-circle' ||\n\t\t\t\t\titem.type === 'play-circle'\n\t\t\t\t) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\t...newStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn item\n\t\t\t})\n\t\t})\n\t}\n\n\tgetCurFrame(CurFrame) {\n\t\tconst playPercent = (CurFrame / this.totalFrames) * 100\n\t\tthis.setState({\n\t\t\tplayPercent\n\t\t})\n\t}\n}\n\nfunction DivBox(props) {\n\tconst { up, down, left, right, forward, back } = props\n\n\treturn (\n\t\t<Tooltip title={props.title}>\n\t\t\t<div className=\"box\" {...props}>\n\t\t\t\t<div className=\"up\" style={up}></div>\n\t\t\t\t<div className=\"down\" style={down}></div>\n\t\t\t\t<div className=\"left\" style={left}></div>\n\t\t\t\t<div className=\"right\" style={right}></div>\n\t\t\t\t<div className=\"forward\" style={forward}></div>\n\t\t\t\t<div className=\"back\" style={back}></div>\n\t\t\t</div>\n\t\t</Tooltip>\n\t)\n}\n","/Users/dufei/Desktop/project/CM_SCLE/src/utils/Browser.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleControl.js",[],{"ruleId":"36","severity":1,"message":"37","line":6,"column":9,"nodeType":"38","messageId":"39","endLine":6,"endColumn":16},{"ruleId":"40","severity":1,"message":"41","line":321,"column":5,"nodeType":"42","endLine":321,"endColumn":7,"suggestions":"43"},{"ruleId":"36","severity":1,"message":"44","line":453,"column":7,"nodeType":"38","messageId":"39","endLine":453,"endColumn":12},"no-unused-vars","'TabPane' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addScleAPi', 'isHttp', 'onProgress', and 'openScle'. Either include them or remove the dependency array.","ArrayExpression",["45"],"'cmlib' is assigned a value but never used.",{"desc":"46","fix":"47"},"Update the dependencies array to be: [addScleAPi, isHttp, onProgress, openScle]",{"range":"48","text":"49"},[8034,8036],"[addScleAPi, isHttp, onProgress, openScle]"]