[{"/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleAttrTree/ScleAttrTree.js":"1","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleTools/scleToolsBar.js":"2","/Users/dufei/Desktop/project/CM_SCLE/src/index.js":"3","/Users/dufei/Desktop/project/CM_SCLE/src/utils/index.js":"4","/Users/dufei/Desktop/project/CM_SCLE/src/utils/Browser.js":"5","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleControl.js":"6"},{"size":21399,"mtime":1669080410136,"results":"7","hashOfConfig":"8"},{"size":24951,"mtime":1669080369463,"results":"9","hashOfConfig":"8"},{"size":597,"mtime":1654507926240,"results":"10","hashOfConfig":"8"},{"size":1538,"mtime":1621387255613,"results":"11","hashOfConfig":"8"},{"size":4273,"mtime":1610022294551,"results":"12","hashOfConfig":"8"},{"size":198,"mtime":1667488932568,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"u4mpcg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleAttrTree/ScleAttrTree.js",["27"],"import { PureComponent } from \"react\";\nimport { Table, Tabs, Tree } from \"antd\";\nimport \"./scleAttrTree.less\";\nimport { IsPhone } from \"../../utils/Browser\";\nimport { DoubleRightOutlined } from '@ant-design/icons';\nimport { scleCustomEvent } from '../../utils';\n\n\nconst { TabPane } = Tabs;\nconst { TreeNode } = Tree;\n\nconst columns = [\n  {\n    title: \"参数名\",\n    dataIndex: \"name\",\n  },\n  {\n    title: \"参数值\",\n    dataIndex: \"value\",\n  },\n];\nexport default class ScleAttrTree extends PureComponent {\n  keys = []; //显示的的keys\n  tempMutilpSelect = []; // 临时多选\n\n  state = {\n    treeData: {\n      child: [],\n    },\n    paramsData: [], // 模型参数\n    treeNodeCheckedKeys: [], // 显示隐藏复选框\n    treeNodeSelectKeys: [], // 选中的key\n    expandedKeys: [], //展开的key\n    PMITreeData: [],\n    PMINodeCheckedKeys:[],\n    PMISelectKeys:[],\n    PMIExpandedKeys:[],\n    hideAnoot:false,\n  };\n  render() {\n    const cmlib = window.CM_LIB;\n    const {\n      treeData,\n      treeNodeCheckedKeys,\n      treeNodeSelectKeys,\n      expandedKeys,\n      paramsData,\n      PMITreeData,\n    } = this.state;\n    return (\n      // <Tabs\n      //   defaultActiveKey=\"1\"\n      //   className=\"scleAttrTree\"\n      //   renderTabBar={this.renderTabBar}\n      // >\n      //   <TabPane tab=\"模型树\" key=\"1\">\n      //     <Tree\n      //       checkable\n      //       checkStrictly\n      //       checkedKeys={treeNodeCheckedKeys}\n      //       selectedKeys={treeNodeSelectKeys}\n      //       expandedKeys={expandedKeys}\n      //       onClick={(e) => {\n      //         return false;\n      //       }}\n      //       onExpand={(e) => {\n      //         this.hideSelect = true;\n      //         this.setState({\n      //           expandedKeys: e,\n      //         });\n      //       }}\n      //       onCheck={(treeNodeCheckedKeys, e) => {\n      //         this.setState({\n      //           treeNodeCheckedKeys,\n      //         });\n      //         window.setModelVisible(\n      //           this.findleafIndexs(e.node.props.dataRef),\n      //           e.checked\n      //         );\n      //          // 模型树隐藏时 dofeel\n      //         const ms = this.state.treeNodeSelectKeys;\n      //         if (ms * 1 === e.node.props.dataRef.key) {\n      //           window.pickObjectVisible = e.checked;\n      //           window.setPickObjectParameters();\n      //         }\n      //       //\n\n      //       }}\n      //     >\n      //       {this.renderTreeNodes(treeData)}\n      //     </Tree>\n      //   </TabPane>\n      //   <TabPane tab=\"参数\" key=\"2\">\n      //     <Table\n      //       className=\"attrTable\"\n      //       columns={columns}\n      //       dataSource={paramsData}\n      //       locale={{ emptyText: \"无数据\" }}\n      //       size=\"middle\"\n      //     />\n      //   </TabPane>\n      // </Tabs>\n\n      <>\n        {!this.props.showParams ? (\n          <div className=\"attr_tree\">\n            <div>\n              <h4 className=\"title\">模型树</h4>\n              <Tree\n                checkable\n                checkStrictly\n                checkedKeys={treeNodeCheckedKeys}\n                selectedKeys={treeNodeSelectKeys}\n                expandedKeys={expandedKeys}\n                onClick={(e) => {\n                  return false;\n                }}\n                onExpand={(e) => {\n                  this.hideSelect = true;\n                  this.setState({\n                    expandedKeys: e,\n                  });\n                }}\n                onCheck={(treeNodeCheckedKeys, e) => {\n                  console.log(treeNodeCheckedKeys);\n                  this.setState({\n                    treeNodeCheckedKeys,\n                  });\n                  cmlib.CMSetObjVisible(\n                    this.findleafIndexs(e.node.props.dataRef),\n                    e.checked\n                  );\n\n                  // 模型树隐藏时 dofeel\n                  const ms = this.state.treeNodeSelectKeys;\n                  if (ms * 1 === e.node.props.dataRef.key) {\n                    window.pickObjectVisible = e.checked;\n                    window.setPickObjectParameters();\n                  }\n                  //\n                }}\n              >\n                {this.renderTreeNodes(treeData)}\n              </Tree>\n            </div>\n            <div className={`anoot ${this.state.hideAnoot? 'hideAnootbox': ''}`}>\n              <h4 className=\"title\"> 标注<DoubleRightOutlined className={`down ${this.state.hideAnoot? 'hideAnoot': ''}`} onClick={e=>{\n                this.setState({\n                  hideAnoot: !this.state.hideAnoot\n                })\n              }}/>\n              \n              </h4>\n              <Tree checkable \n                checkedKeys={this.state.PMINodeCheckedKeys}\n                selectedKeys={this.state.PMISelectKeys}\n                expandedKeys={this.state.PMIExpandedKeys}\n                onClick={(e) => {\n                  return false;\n                }}\n                onExpand={(e) => {\n                  console.log(e);\n                  this.setState({\n                    PMIExpandedKeys: e,\n                  });\n                }}\n                onCheck={(treeNodeCheckedKeys, e) => {\n                const item = e.node.props.dataRef;\n\n                let {PMINodeCheckedKeys} = this.state;\n                console.log('onCheck',treeNodeCheckedKeys, e,item);\n\n                if(e.checked){\n                  PMINodeCheckedKeys = Array.from(new Set(treeNodeCheckedKeys.concat(this.state.PMINodeCheckedKeys)))\n                }else{\n                  const cids = [item.key]; \n                  if(item.type === \"view\") cids.push(...item.child.map(i=>i.key));\n                  if(item.type === \"annot\") cids.push(item.parentPmiId);\n                  // \n                  PMINodeCheckedKeys = PMINodeCheckedKeys.filter(i=> !cids.includes(i))\n                }\n\n                this.setState({\n                  PMINodeCheckedKeys\n                })\n\n\n\n\n                if(item.type ==='view'){\n                  // let arrViewId = cmlib.CMGetAnnotViewIDByTreeID(item.pmiId);\n                  // console.log(`设置${item.pmiId}视图是否显示,${e.checked}`);\n                  cmlib.CMSetAnnotVisibleInView([item.pmiId], e.checked)\n                }else{\n                  // console.log(`设置${item.pmiId}批注是否显示,${e.checked}`);\n                  cmlib.CMSetAnnotVisible([item.pmiId], e.checked)\n                }\n\n\n                }} \n               >\n                {this.renderPMITree(PMITreeData)}\n              </Tree>\n            </div>\n          </div>\n        ) : (\n          <>\n            <h4 className=\"title\">参数</h4>\n            <Table\n              className=\"attrTable\"\n              columns={columns}\n              dataSource={paramsData}\n              locale={{ emptyText: \"无数据\" }}\n              size=\"middle\"\n            />\n          </>\n        )}\n      </>\n    );\n  }\n\n  renderTabBar(DefaultTabBarProps, DefaultTabBar) {\n    return <DefaultTabBar {...DefaultTabBarProps} />;\n  }\n\n  renderTreeNodes(treeData) {\n    if (!treeData.length) return null;\n    return treeData.map((item) => {\n      if (item.child) {\n        return (\n          <TreeNode\n            checkable={true}\n            title={this.renderTitle(item)}\n            key={item.key}\n            dataRef={item}\n          >\n            {this.renderTreeNodes(item.child)}\n          </TreeNode>\n        );\n      }\n      return (\n        <TreeNode\n          checkable={true}\n          key={item.key}\n          title={item.title}\n          {...item}\n          dataRef={item}\n        />\n      );\n    });\n  }\n\n  renderTitle(item) {\n    const cmlib = window.CM_LIB;\n    const key = item.key;\n    return (\n      <span\n        className={\n          this.state.treeNodeSelectKeys.indexOf(key) > -1 ? \"tree_selected\" : \"\"\n        }\n        onClick={() => {\n          // 选择模型名称时 dofeel\n          if (this.keyCode) return;\n          this.hideSelect = true;\n\n          this.tempMutilpSelect = this.findleafIndexs(item, 'key');\n          // this.setState({\n          //   treeNodeSelectKeys: this.tempMutilpSelect,\n          //   paramsData: item.params,\n          // });\n\n          const objIds = this.findleafIndexs(item)\n\n\n          cmlib.CMSetSelStatusByObjIDs(objIds);\n\n          scleCustomEvent('updateParams', item.params);\n\n          // window.setPickObjectParameters();\n\n          this.pickObjectParameters(objIds)\n          // window.pickModelByIndex(this.tempMutilpSelect, IsPhone());\n        }}\n        onMouseDown={() => {\n          if (this.keyCode === 17) {\n            let { treeNodeSelectKeys } = this.state;\n\n            const leafKeys = this.findleafIndexs(item);\n\n            if (treeNodeSelectKeys.indexOf(key) > -1) {\n              // 已选择，取消选择\n              treeNodeSelectKeys = treeNodeSelectKeys.filter(\n                (item) => item !== key\n              );\n              // 临时多选\n              this.tempMutilpSelect = this.tempMutilpSelect.filter(\n                (item) => leafKeys.indexOf(item) === -1\n              );\n            } else {\n              treeNodeSelectKeys.push(key);\n              this.tempMutilpSelect = this.tempMutilpSelect.concat(leafKeys);\n            }\n\n            this.hideSelect = true;\n            this.setState({\n              treeNodeSelectKeys,\n              paramsData: [],\n            });\n\n            window.pickModelByIndex(this.tempMutilpSelect, IsPhone());\n            // 多选 dofeel\n            window.setPickObjectParameters();\n          }\n        }}\n      >\n        {item.title}\n      </span>\n    );\n  }\n\n  //   scleStreamReady\n  loadTree() {\n     this.keys = []; //显示的的keys\n     this.tempMutilpSelect = []; // 临时多选\n\n    const treeData = [this.getTreeNodeData(window.g_GLData.GLModelTreeNode)];\n\n    const { expandedKeys } = this.getExpandedAndSelctKeys(treeData, [-1]);\n\n    this.setState({\n      treeData,\n      expandedKeys,\n      treeNodeCheckedKeys: this.keys,\n      treeNodeSelectKeys:[],\n      paramsData:[],\n      PMITreeData: [],\n      PMINodeCheckedKeys:[],\n      PMISelectKeys:[],\n    });\n\n    this.keys= null;\n  }\n\n  setVisible(visible) {\n\n    let { treeNodeCheckedKeys } = this.state;\n    treeNodeCheckedKeys = treeNodeCheckedKeys.checked || treeNodeCheckedKeys;\n    if (window.pickObjectIndexs === null) {\n      return;\n    }\n    const visibleKeys = this.setTreeVisible(\n      this.state.treeData,\n      window.pickObjectIndexs,\n      visible\n    );\n    treeNodeCheckedKeys = visible\n      ? treeNodeCheckedKeys.concat(visibleKeys)\n      : treeNodeCheckedKeys.filter((item) => visibleKeys.indexOf(item) < 0);\n    this.setState({\n      treeNodeCheckedKeys,\n    });\n  }\n\n  setTreeVisible(data, keys, visible, visibleKeys = []) {\n    for (let i = 0; i < data.length; i++) {\n      if (keys.indexOf(data[i].objIndex) > -1) {\n        visibleKeys.push(data[i].key);\n      }\n      if (data[i].child.length) {\n        this.setTreeVisible(data[i].child, keys, visible, visibleKeys);\n      }\n    }\n    return visibleKeys;\n  }\n  /**\n   *\n   * @param data\n   * @param leafIndexs  叶子的index []\n   */\n  getExpandedAndSelctKeys(data, leafIndexs) {\n    let findParentKeys = this.findParentKeys(data, leafIndexs),\n      expandedKeys = [],\n      treeNodeSelectKeys = [];\n    findParentKeys.forEach((item) => {\n      const { parentKeys } = item;\n      treeNodeSelectKeys.push(parentKeys[parentKeys.length - 1]);\n      expandedKeys = expandedKeys.concat(item.parentKeys);\n    });\n\n    // 去重展开的key\n    expandedKeys = new Set(expandedKeys);\n    expandedKeys = Array.from(expandedKeys);\n\n    return {\n      expandedKeys,\n      treeNodeSelectKeys,\n      item: findParentKeys,\n    };\n  }\n\n  findParentKeys(data, objIndexs, key = []) {\n    if (!objIndexs.length) return key;\n    for (let i = 0; i < data.length; i++) {\n      const node = data[i];\n      const index = objIndexs.indexOf(node.objId);\n      if (index > -1) {\n        key.push(node);\n        objIndexs.filter((item) => item !== node.objId);\n      } else if (node.child && node.child.length) {\n        this.findParentKeys(node.child, objIndexs, key);\n      }\n    }\n    return key;\n  }\n\n  pickObjectParameters = (objIds) => {\n\n    \n    const cmlib = window.CM_LIB;\n\n    let pickElem = cmlib.CMGetPickElements();\n\n    \n    // console.log(pickElem, this.state.treeData);\n\n    \n    const pickObjectIndexs = objIds || pickElem._arrPickElements\n    // const notPickModel = !window.pickObjectIndexs || (window.pickObjectIndexs && !window.pickObjectIndexs.length)\n    const notPickModel = !pickObjectIndexs || (pickObjectIndexs && !pickObjectIndexs.length)\n\n    if (notPickModel) {\n      // this.setState({\n      //   treeNodeSelectKeys: [],\n      //   // isVisible: !!window.pickObjectVisible,\n      //   // alphaRange: window.pickObjectTransparent,\n      // });\n      return;\n    }\n    this.handleInitPMI(!notPickModel)\n\n    const { expandedKeys,treeNodeSelectKeys,  item } =\n      this.getExpandedAndSelctKeys(\n        this.state.treeData,\n        pickObjectIndexs \n      );\n\n      console.log(item);\n\n    this.SetTreeNodePmiView(item.length === 1?item[0].nodeid:null);\n\n\n    // console.log('treeNodeSelectKeys', item.length === 1 ? item[0].params : []);\n    this.setState({\n      expandedKeys,\n      treeNodeSelectKeys,\n      paramsData: item.length === 1 ? item[0].params : [],\n      // isVisible: !!pickObjectVisible,\n      // alphaRange: pickObjectTransparent\n    });\n  };\n\n  renderPMITree(treeData) {\n    if (!treeData.length) return null;\n    return treeData.map((item) => {\n      if (item.child) {\n        return (\n          <TreeNode title={this.renderPMITitle(item)} key={item.key} dataRef={item}>\n            {this.renderPMITree(item.child)}\n          </TreeNode>\n        );\n      }\n      return (\n        <TreeNode key={item.key} title={this.renderPMITitle(item)}  {...item} dataRef={item} />\n      );\n    });\n  }\n\n  renderPMITitle(item){\n    const cmlib = window.CM_LIB;\n    return <span className={\n      this.state.PMISelectKeys.indexOf(item.key) > -1 ? \"tree_selected\" : \"\"\n    } \n    onClick={()=>{\n      if(item.type ==='view'){\n        console.log('CMShiftAnnotView', item);\n        cmlib.CMShiftAnnotView(item.pmiId)\n      }\n      this.setState({\n        PMISelectKeys:[item.key]\n      })\n    }}\n    \n    onDoubleClick={()=>{\n      if(item.type !== 'view'){\n        console.log('CMChangeCameraFocusToAnnot', item);\n        cmlib.CMChangeCameraFocusToAnnot(item.pmiId)\n      }\n    }}>\n      {item.name}\n    </span>\n  }\n\n  SetTreeNodePmiView(nodeid) {\n    let cmlib = window.CM_LIB;\n    let arrViewId = cmlib.CMGetAnnotViewIDByTreeID(nodeid);\n    const notPickModel = arrViewId === null || arrViewId.length <= 0;\n\n    if (notPickModel) return this.setState({\n      PMITreeData: [],\n    });;\n\n    const pmiTree = arrViewId.map((id) => {\n      const name = cmlib.CMGetAnnotViewName(id);\n      \n      const arrAnnotId = cmlib.CMGetAnnotIDInView(id);\n\n      return {\n        name,\n        key: \"view\" + id,\n        pmiId: id,\n        type:'view',\n        child: arrAnnotId.map((i) => {\n          return {\n            name: cmlib.CMGetAnnotName(i),\n            key: \"annotid\" + i,\n            type:'annot',\n            pmiId: i,\n            parentPmiId: \"view\" + id,\n          };\n        }),\n      };\n    });\n    this.setState({\n      PMITreeData: pmiTree,\n    });\n\n    // console.log(pmiTree);\n    // let viewName = cmlib.CMGetAnnotViewName(arrViewId[0]);\n\n    // let arrAnnotId = cmlib.CMGetAnnotIDInView(arrViewId[0]);\n    // let annotViewId = cmlib.CMGetViewIDByAnnotID(arrAnnotId[0]);\n    // let annotName = cmlib.CMGetAnnotName(arrAnnotId[0]);\n    // let annotType = cmlib.CMGetAnnotType(arrAnnotId[0]);\n    // let annotVisible = cmlib.CMIsAnnotVisible(arrAnnotId[0]);\n    // cmlib.CMSetAnnotVisibleInView(arrViewId, true);\n  }\n\n  handleCMSetAnnotVisibleInView(treeNodeIds) {\n    let cmlib = window.CM_LIB;\n    cmlib.CMSetAnnotVisibleInView(treeNodeIds, true);\n  }\n\n\n  handleInitPMI(bl) {\n    let cmlib = window.CM_LIB;\n\n    if (bl) {\n      cmlib.CMInitPmi();\n    } else {\n      cmlib.CMResetPmiDispColor();\n      cmlib.CMUnInitPmi();\n    }\n  }\n\n  getTreeNodeData(item, parentKeys = []) {\n    const key = `${item._uTreeNodeID}`\n    parentKeys = parentKeys.concat(key);\n    if (item._bVisible) this.keys.push(key);\n    return {\n      key,\n      parentKeys,\n      nodeid: item._uTreeNodeID,\n      treeid: item._uJSTreeID,\n      title: item._strName,\n      params: this.getTreeNodeParams(item._arrNodeParameters),\n      objIndex: item._uObjectIndex,\n      originVisible: item._bVisibleOriginal,\n      visible: item._bVisible,\n      TriangleCount: item._uObjectTriangleCount,\n      child: this.processTreeData(item._arrSubNode, parentKeys),\n      objId: item._uObjectID\n    };\n  }\n\n  processTreeData(treeData, parentKeys) {\n    // console.log(treeData);\n    if (!treeData || !treeData.length) return [];\n    return treeData.map((item) => this.getTreeNodeData(item, parentKeys));\n  }\n\n  getTreeNodeParams(arrParmas) {\n    return arrParmas.map((item) => ({\n      name: item._strName,\n      value: item._strValue,\n    }));\n  }\n\n  findleafIndexs = (data, key = 'objId') => {\n    let indexs = [];\n    if (data.child && data.child.length) {\n      data.child.map(\n        (item) => (indexs = indexs.concat(this.findleafIndexs(item, key)))\n      );\n      return indexs;\n    } else {\n      indexs.push(data[key]);\n      return indexs;\n    }\n  };\n\n  disableContextmenu = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  };\n  keyup = (e) => {\n    this.keyCode = 0;\n    if (this.state.multipleSelcet) {\n      this.setState({\n        multipleSelcet: false,\n      });\n    }\n  };\n  keydown = (e) => {\n    if (e.keyCode === 17) {\n      this.keyCode = 17;\n\n      this.setState({\n        multipleSelcet: true,\n      });\n    }\n  };\n  pickAnnot(){\n    const cmlib = window.CM_LIB;\n    let pickElem = cmlib.CMGetPickElements();\n    const ids = pickElem._arrPickElements[0]\n    console.log('pickElem._arrPickElements', ids, this.state.PMITreeData);\n\n    // let item;\n    // this.state.PMITreeData.some(i=> {\n    //   const findview = i.pmiId === ids\n    //   if(findview)item = i;\n    //   return  findview || i.child.some(j=>{\n    //     const isFind = j.pmiId === ids;\n    //     if(isFind)item = j;\n    //     return isFind\n    //   })\n    // })\n    const PMISelectKeys = ['annotid'+ids]\n    // function findItem(items, key, keys){\n    //   if(!items || !items.length) return keys\n    //   items.forEach(item=>{\n    //     if(item.key === key){\n    //       keys = item;\n    //     }else if(item.child && item.child.length){\n    //       findItem(item.child, key, keys)\n    //     }\n    //   })\n\n    //   return keys\n    // }\n\n    // const selectItem = findItem(this.state.PMITreeData, PMISelectKeys[0])\n    let selectItem;\n    this.state.PMITreeData.forEach(item=>{\n      item.child.forEach(i=>{\n        if(i.key === PMISelectKeys[0]) selectItem = i;\n      })\n    })\n   \n    console.log('selectItem',selectItem);\n\n\n\n    this.setState({\n      PMISelectKeys,\n      PMIExpandedKeys: selectItem?[selectItem.parentPmiId] :[]\n    })\n    \n  }\n  //   ---------------------\n  componentDidMount() {\n    if (window.g_GLData) {\n      this.loadTree();\n    } \n    window.addEventListener(\"scleStreamReady\", () => this.loadTree(), {\n      passive: false,\n    });\n\n    window.addEventListener(\"CMOnMouseUpCallBack\", (e) => {\n      const cmlib = window.CM_LIB;\n      let pickElem = cmlib.CMGetPickElements();\n      const hasPick = pickElem && pickElem._arrPickElements && pickElem._arrPickElements.length;\n      // console.log('hasPick', hasPick, pickElem);\n\n\n      if(!hasPick){\n        this.setState({\n          paramsData:[],\n          treeNodeSelectKeys:[],\n          PMISelectKeys:[]\n        })\n      }\n\n      // eslint-disable-next-line\n      if (pickElem._uPickType == CM_PICK_TYPE_PART) {\n          // console.log(\"type: 零件\" +\n          //             \"; elems: \" , pickElem._arrPickElements[0] ,\n          //             \"; 名称: \" , cmlib.CMGetObjName(pickElem._arrPickElements[0]) ,\n          //             \"; 参数: \", cmlib.CMGetObjParams(pickElem._arrPickElements[0]));\n        this.pickObjectParameters();\n      // eslint-disable-next-line\n      } else if (pickElem._uPickType == CM_PICK_TYPE_PMI_ITEM) {\n          // console.log(\"type: PMI\" +\n          //             \"; elems: \" + pickElem._arrPickElements[0] +\n          //             \"; 名称: \" + cmlib.CMGetAnnotName(pickElem._arrPickElements[0]));\n        this.pickAnnot();\n      }\n\n    }, { passive: false,});\n\n    \n    window.setVisibleTree = this.setVisible.bind(this);\n  \n    window.addEventListener(\"keydown\", this.keydown);\n    window.addEventListener(\"keyup\", this.keyup);\n    document.addEventListener(\"contextmenu\", this.disableContextmenu);\n\n    window.addEventListener('updateParams', e=>{\n      this.setState({\n        paramsData: e.detail\n      })\n    })\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"scleStreamReady\", this.loadTree.bind(this), {\n      passive: false,\n    });\n\n    // window.removeEventListener(\"pickParams\", this.pickObjectParameters, {\n    //   passive: false,\n    // });\n    document.removeEventListener(\"contextmenu\", this.disableContextmenu);\n    window.removeEventListener(\"keyup\", this.keyup);\n    window.removeEventListener(\"keydown\", this.keydown);\n  }\n}\n","/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleTools/scleToolsBar.js",["28","29","30","31","32","33"],"/Users/dufei/Desktop/project/CM_SCLE/src/index.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/utils/index.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/utils/Browser.js",[],"/Users/dufei/Desktop/project/CM_SCLE/src/routes/scleControl.js",[],{"ruleId":"34","severity":1,"message":"35","line":9,"column":9,"nodeType":"36","messageId":"37","endLine":9,"endColumn":16},{"ruleId":"34","severity":1,"message":"38","line":29,"column":10,"nodeType":"36","messageId":"37","endLine":29,"endColumn":29},{"ruleId":"34","severity":1,"message":"39","line":29,"column":31,"nodeType":"36","messageId":"37","endLine":29,"endColumn":49},{"ruleId":"34","severity":1,"message":"40","line":473,"column":7,"nodeType":"36","messageId":"37","endLine":473,"endColumn":12},{"ruleId":"34","severity":1,"message":"40","line":503,"column":7,"nodeType":"36","messageId":"37","endLine":503,"endColumn":12},{"ruleId":"34","severity":1,"message":"41","line":506,"column":9,"nodeType":"36","messageId":"37","endLine":506,"endColumn":17},{"ruleId":"34","severity":1,"message":"42","line":550,"column":10,"nodeType":"36","messageId":"37","endLine":550,"endColumn":13},"no-unused-vars","'TabPane' is assigned a value but never used.","Identifier","unusedVar","'DoubleRightOutlined' is defined but never used.","'DoubleLeftOutlined' is defined but never used.","'cmlib' is assigned a value but never used.","'prevAxis' is assigned a value but never used.","'arr' is assigned a value but never used."]